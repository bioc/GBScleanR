% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/Methods-GbsrGenotypeData.R
\name{resetFilters}
\alias{resetFilters}
\alias{resetFilters,GbsrGenotypeData-method}
\title{Reset all filters made by \code{\link[=setScanFilter]{setScanFilter()}}, \code{\link[=setSnpFilter]{setSnpFilter()}},
and \code{\link[=setCallFilter]{setCallFilter()}}.}
\usage{
resetFilters(object, ...)

\S4method{resetFilters}{GbsrGenotypeData}(object)

\S4method{resetFilters}{GbsrGenotypeData}(object)
}
\arguments{
\item{object}{A \link{GbsrGenotypeData} object.}

\item{...}{Unused.}
}
\value{
A \link{GbsrGenotypeData} object after removing all filters.

A \link{GbsrGenotypeData} object after removing all filters on markers.
}
\description{
Return all data intact.
}
\examples{
# Create a GDS file from a sample VCF file.
vcf_fn <- system.file("extdata", "sample.vcf", package = "GBScleanR")
gds_fn <- tempfile("sample", fileext = ".gds")
gbsrVCF2GDS(vcf_fn = vcf_fn, out_fn = gds_fn, force = TRUE)

# Load data in the GDS file and instantiate a [GbsrGenotypeData] object.
gds <- loadGDS(gds_fn)

# `setCallFilter()` do not require summarized information of
# genotype counts and read counts.
gds <- setCallFilter(gds, dp_count = c(5, Inf))

# `setScanFilter()` and `setSnpFilter()` needs information of
# the genotype count summary and the read count summary.
gds <- countGenotype(gds)
gds <- countRead(gds)

gds <- setScanFilter(gds,
                       id = getScanID(gds)[1:10],
                       missing = 0.2,
                       dp = c(5, Inf))

gds <- setSnpFilter(gds,
                      id = getSnpID(gds)[1:100],
                      missing = 0.2,
                      dp = c(5, Inf))

gds <- setInfoFilter(gds, mq = 40, qd = 20)

# Reset all filters applied above.
gds <- resetFilters(gds)

# Close the connection to the GDS file.
closeGDS(gds)
}
