% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/Methods-GbsrGenotypeData.R
\name{subsetGDS}
\alias{subsetGDS}
\alias{subsetGDS,GbsrGenotypeData-method}
\title{Create a GDS file with subset data of the current GDS file}
\usage{
subsetGDS(
  object,
  out_fn = "./susbet.gds",
  snp_incl,
  scan_incl,
  incl_parents = TRUE,
  verbose = TRUE,
  ...
)

\S4method{subsetGDS}{GbsrGenotypeData}(object, out_fn, snp_incl, scan_incl, incl_parents, verbose)
}
\arguments{
\item{object}{A \link{GbsrGenotypeData} object.}

\item{out_fn}{A string to specify the path to an output GDS file.}

\item{snp_incl}{A logical vector having the same length
with the total number of markers.
The values obtained via \code{\link[=getValidSnp]{getValidSnp()}} are used.}

\item{scan_incl}{A logical vector having the same length
with the total number of scans (samples).
The values obtained via \code{\link[=getValidScan]{getValidScan()}} are used.}

\item{incl_parents}{A logical value to specify whether parental
samples should be included in a subset data or not.}

\item{verbose}{if TRUE, show information.}

\item{...}{Unused.}
}
\value{
A \link{GbsrGenotypeData} object linking to
the new GDS file storing subset data.
}
\description{
Create a new GDS file storing the subset
data from the current GDS file linked to
the given \link{GbsrGenotypeData} object with
keeping (or removing) information based on
valid markers and samples information.
}
\details{
A resultant subset data in a new GDS file includes subsets
of each category of data, e.g.
genotype, SNP ID, scan ID, read counts,
and quality metrics of SNP markers.
}
\examples{
#' # Create a GDS file from a sample VCF file.
vcf_fn <- system.file("extdata", "sample.vcf", package = "GBScleanR")
gds_fn <- tempfile("sample", fileext = ".gds")
gbsrVCF2GDS(vcf_fn = vcf_fn, out_fn = gds_fn, force = TRUE)

# Load data in the GDS file and instantiate a [GbsrGenotypeData] object.
gds <- loadGDS(gds_fn)

# Summarize genotype count information to be used in `setSnpFilter()`
gds <- countGenotype(gds)

# Filter out markers meeting the criteia.
gds <- setSnpFilter(gds, missing = 0.2, het = c(0.1, 0.9), maf = 0.05)

# Create a new GDS file with the subset data obtained by applying
# the filter maed via `setSnpFilter()`.
subsetgds_fn <- tempfile("sample_subset", fileext = ".gds")
subset_gds <- subsetGDS(gds, out_fn = subsetgds_fn)

# Close the connection to the GDS files.
closeGDS(subset_gds)
closeGDS(gds)

}
