% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R
\name{subsetGDS}
\alias{subsetGDS}
\title{Create a GDS file with subset data of the current GDS file}
\usage{
subsetGDS(
  object,
  out_fn = "./susbet.gds",
  incl_parents = TRUE,
  verbose = TRUE,
  ...
)
}
\arguments{
\item{object}{A \link{GbsrGenotypeData} object.}

\item{out_fn}{A string to specify the path to an output GDS file.}

\item{incl_parents}{A logical value to specify whether parental
samples should be included in a subset data or not.}

\item{verbose}{if TRUE, show information.}

\item{...}{Unused.}
}
\value{
A \link{GbsrGenotypeData} object linking to
the new GDS file storing subset data.
}
\description{
Create a new GDS file storing the subset
data from the current GDS file linked to
the given \link{GbsrGenotypeData} object with
keeping (or removing) information based on
valid markers and samples information.
}
\details{
A resultant subset data in a new GDS file includes subsets
of each category of data, e.g.
genotype, SNP ID, scan ID, read counts,
and quality metrics of SNP markers.
The connection to the GDS file of the input \link{GbsrGenotypeData} object will
be automatically closed for internal file handling in this function. Please
use \code{\link[=openGDS]{openGDS()}} to open the connection again. If you use \code{\link[=loadGDS]{loadGDS()}},
summary statistics and filtering information will be discarded.
}
\examples{
#' # Create a GDS file from a sample VCF file.
vcf_fn <- system.file("extdata", "sample.vcf", package = "GBScleanR")
gds_fn <- tempfile("sample", fileext = ".gds")
gbsrVCF2GDS(vcf_fn = vcf_fn, out_fn = gds_fn, force = TRUE)

# Load data in the GDS file and instantiate a [GbsrGenotypeData] object.
gds <- loadGDS(gds_fn)

# Summarize genotype count information to be used in `setSnpFilter()`
gds <- countGenotype(gds)

# Filter out markers meeting the criteia.
gds <- setSnpFilter(gds, missing = 0.2, het = c(0.1, 0.9), maf = 0.05)

# Create a new GDS file with the subset data obtained by applying
# the filter maed via `setSnpFilter()`.
subsetgds_fn <- tempfile("sample_subset", fileext = ".gds")
subset_gds <- subsetGDS(gds, out_fn = subsetgds_fn)

# Close the connection to the GDS files.
closeGDS(subset_gds)

}
