% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/Methods-GbsrGenotypeData_HMM.R
\name{estGeno}
\alias{estGeno}
\alias{estGeno,GbsrGenotypeData-method}
\title{Genotype estimation using a hiden Morkov model}
\usage{
estGeno(
  object,
  chr,
  recomb_rate = 0.04,
  error_rate = 0.0025,
  call_threshold = 0.9,
  het_parent = FALSE,
  optim = TRUE,
  iter = 2,
  n_threads = NULL,
  ...
)

\S4method{estGeno}{GbsrGenotypeData}(
  object,
  chr,
  recomb_rate,
  error_rate,
  call_threshold,
  het_parent,
  optim,
  iter,
  n_threads
)
}
\arguments{
\item{object}{A \link{GbsrGenotypeData} object.}

\item{chr}{An integer vector of chromosome indices to
be analyzed. All chromosomes will be analyzed if you left it default.}

\item{recomb_rate}{A numeric value to indicate the expected
recombination frequency per chromosome per megabase pairs.}

\item{error_rate}{A numeric value of the expected sequence error rate.}

\item{call_threshold}{A numeric value of the probability threshold
to accept estimated genotype calls.}

\item{het_parent}{A logical value to indicate whether parental
samples are outbred or inbred. If FALSE, this function assume all
true genotype of markers in parents are homozygotes.}

\item{optim}{A logical value to specify whether to
conduct parameter optimization for
error correction.}

\item{iter}{An integer value to specify the number of
iterative parameter updates.}

\item{n_threads}{An integer value to specify the number of
threads used for the calculation. The default is \code{n_threads = NULL}
and automatically set half the number of available threads on the computer.}

\item{...}{Unused.}
}
\value{
A \link{GbsrGenotypeData} object in which the "estimated.haplotype",
"corrected.genotype" and
"parents.genotype" nodes were added.
}
\description{
Clean up genotype data by error correction based on
genotype estimation using a hidden Markov model.
}
\examples{
# Load data in the GDS file and instantiate a [GbsrGenotypeData] object.
gds_fn <- system.file("extdata", "sample.gds", package = "GBScleanR")
gds <- loadGDS(gds_fn)

# Find the IDs of parental samples.
parents <- grep("Founder", getScanID(gds), value = TRUE)

# Set the parents and flip allele information
# if the reference sample (Founder1 in our case) has homozygous
# alternative genotype at some markers of which alleles will
# be swapped to make the reference sample have homozygous
# reference genotype.
gds <- setParents(gds, parents = parents, flip = TRUE)

# Initialize a scheme object stored in the slot of the GbsrGenotypeData.
# We chose `crosstype = "pair"` because two inbred founders were mated
# in our breeding scheme.
# We also need to specify the mating matrix which has two rows and
# one column with integers 1 and 2 indicating a sample (founder)
# with the memberID 1 and a sample (founder) with the memberID 2
# were mated.
gds <- initScheme(gds, crosstype = "pair", mating = cbind(c(1:2)))

# Add information of the next cross conducted in our scheme.
# We chose 'crosstype = "selfing"', which do not require a
# mating matrix.
gds <- addScheme(gds, crosstype = "selfing")

# Execute error correction by estimating genotype and haplotype of
# founders and offspring.
gds <- estGeno(gds)

# Close the connection to the GDS file.
closeGDS(gds)

}
