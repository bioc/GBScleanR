% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/Methods-GbsrGenotypeData_HMM.R
\name{estGeno}
\alias{estGeno}
\alias{estGeno,GbsrGenotypeData-method}
\title{Genotype estimation using a hiden Morkov model}
\usage{
estGeno(
  object,
  chr,
  recomb_rate = 0.04,
  error_rate = 0.0025,
  call_threshold = 0.9,
  het_parent = FALSE,
  optim = TRUE,
  iter = 2,
  n_threads = NULL,
  sep_vit,
  ...
)

\S4method{estGeno}{GbsrGenotypeData}(
  object,
  chr,
  recomb_rate,
  error_rate,
  call_threshold,
  het_parent,
  optim,
  iter,
  n_threads,
  sep_vit
)
}
\arguments{
\item{object}{A GbsrGenotypeData object.}

\item{chr}{An integer vector of chromosome indices to be analyzed. All chromosomes will be analyzed if you left it default.}

\item{recomb_rate}{A numeric value to indicate the expected recombination frequency per chromosome per megabase pairs.}

\item{error_rate}{A numeric value of the expected sequence error rate.}

\item{call_threshold}{A numeric value of the probability threhosld to accept estimated genotype calls.}

\item{het_parent}{A logical value to indicate whether parental samples are outbred or inbred. If FALSE, this function assume all true genotype of markers in parents are homozygotes.}

\item{optim}{A logical value to specify whether to conduct parameter optimization for
error correction.}

\item{iter}{An integer value to specify the number of iterative parameter updates.}

\item{n_threads}{An integer value to specify the number of threads used for the calculation. The default is `n_threads = NULL` and automatically set half the number of available threads on the computer.}

\item{sep_vit}{A logical value. If TRUE, estimation of founder genotype will be done first and then offspring genotype. The separate estimation of founder and offspring genotypes uses less RAM.}

\item{...}{Unused.}
}
\value{
A GbsrGenotypeData object.
}
\description{
Clean up genotype data by error correction based on genotype estimation using a hidden Markov model.
}
\examples{
\dontrun{
gds <- loadGDS("/path/to/GDS.gds")
gds <- setParents(gds, parents = getScanID(gds)[1:4])
gds <- initScheme(gds, crosstype = "pairing", mating = matrix(1:4, 2))
gds <- addScheme(gds, "pairing", mating = matrix(5:6, 2))
gds <- addScheme(gds, "selfing")
gds <- estGeno(gds, recomb_rate = 0.03, het_parent = FALSE, iter = 3)
}

}
