% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/Methods-GbsrGenotypeData.R
\name{setFiltGenotype}
\alias{setFiltGenotype}
\alias{setFiltGenotype,GbsrGenotypeData-method}
\title{Set the filtered data to be used in GBScleanR's functions}
\usage{
setFiltGenotype(object, ...)

\S4method{setFiltGenotype}{GbsrGenotypeData}(object)
}
\arguments{
\item{object}{A \link{GbsrGenotypeData} object.}

\item{...}{Unused.}
}
\value{
A \link{GbsrGenotypeData} object.
}
\description{
Set the "filt.genotype" node and the "filt.data" node as
primary nodes for genotype
data and read count data. The data stored
in the primary nodes are used in the
functions of GBScleanR.
}
\details{
A \link{GbsrGenotypeData} object storing information of
the primary node of genotype data and
read count data. All of the functions implemented
in \link{GBScleanR} check the primary nodes
and use data stored in those nodes. \code{\link[=setCallFilter]{setCallFilter()}}
create new nodes storing
filtered genotype calls and read counts in a GDS file
and change the primary nodes to
"filt.genotype" and "filt.data" for genotype and
read count data, respectively.
\code{\link[=setRawGenotype]{setRawGenotype()}} set back the nodes to the original,
those are "genotype" and "data" for
genotype and read count data, respectively.
You can set the filtered data again by \code{\link[=setFiltGenotype]{setFiltGenotype()}}.
}
\examples{
# Create a GDS file from a sample VCF file.
vcf_fn <- system.file("extdata", "sample.vcf", package = "GBScleanR")
gds_fn <- tempfile("sample", fileext = ".gds")
gbsrVCF2GDS(vcf_fn = vcf_fn, out_fn = gds_fn, force = TRUE)

# Load data in the GDS file and instantiate a [GbsrGenotypeData] object.
gds <- loadGDS(gds_fn)

# Filter out set zero to read counts and
# missing to genotype calls of which meet the criteria.
gds <- setCallFilter(gds, dp_count = c(5, Inf))

# Now any functions of [GBScleanR] reference the genotype data
# stored in the "filt.genotype" node of the GDS file.

# Close and reopen the connection to the GDS file.
closeGDS(gds)
gds <- loadGDS(gds)

# If the connection was closed once and re-loaded,
# raw genotype data is referenced by the functions.

# To set the "filt.genotype" node as genotype data again,
# run the setFiltGenotype().
gds <- setFiltGenotype(gds)

# Close the connection to the GDS file
closeGDS(gds)

}
