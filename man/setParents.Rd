% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/Methods-GbsrGenotypeData.R
\name{setParents}
\alias{setParents}
\alias{setParents,GbsrGenotypeData-method}
\title{Set labels to samples which should be recognized as
parents of the population to be subjected to error correction.}
\usage{
setParents(object, parents, flip = FALSE, mono = FALSE, bi = FALSE, ...)

\S4method{setParents}{GbsrGenotypeData}(object, parents, flip, mono, bi)
}
\arguments{
\item{object}{A \link{GbsrGenotypeData} object.}

\item{parents}{A vector of strings with at least length two.
The specified strings should match with the samples
ID available via \code{\link[=getScanID]{getScanID()}}.}

\item{flip}{A logical value to indicate whether markers should
be checked for "flip". See details.}

\item{mono}{A logical value whether to filter out markers which
are not monomorphic in parents.}

\item{bi}{A logical value whether to filter out marekrs which
are not biallelic between parents.}

\item{...}{Unused.}
}
\value{
A \link{GbsrGenotypeData} object with parents information.
}
\description{
Specify two or more samples in the dataset as parents
of the population. Markers will be filtered out up on your specification.
}
\details{
The \code{clean} function of \link{GBScleanR} uses read count information of
samples and their parents separately to estimate most probable
genotype calls of them. Therefore, you must specify proper samples
as parents via this function. If you would like to remove SNP markers
which are not biallelic and/or not monomorphic in each parent,
set \code{mono = TRUE} and \code{bi = TRUE}. \code{flip = TRUE} flips alleles of
markers where the alleles expected as reference allele are called
as alternative allele. The alleles found in the parent specified as
the first element to the \code{parents} argument are supposed as reference
alleles of the markers. If the "expected" reference alleles are not
actually called as reference alleles but alternative alleles
in the given data. setParents() will automatically labels
those markers "flipped".
The SnpAnnotatoinDataFrame slot sores this information and accessible
via \code{\link[=getFlipped]{getFlipped()}} which gives you a logical vector
indicating which markers are labeled as flipped \code{TRUE} or
not flipped \code{FALSE}. \code{\link[=hasFlipped]{hasFlipped()}} just tells you whether
the SnpAnnotatoinDataFrame slot has the information of flipped
markers or not.
}
\examples{
# Load data in the GDS file and instantiate a [GbsrGenotypeData] object.
gds_fn <- system.file("extdata", "sample.gds", package = "GBScleanR")
gds <- loadGDS(gds_fn)

# Find the IDs of parental samples.
parents <- grep("Founder", getScanID(gds), value = TRUE)

# Set the parents and flip allele information
# if the reference sample (Founder1 in our case) has homozygous
# alternative genotype at some markers of which alleles will
# be swapped to make the reference sample have homozygous
# reference genotype.
gds <- setParents(gds, parents = parents, flip = TRUE)

# Initialize a scheme object stored in the slot of the GbsrGenotypeData.
# We chose `crosstype = "pair"` because two inbred founders were mated
# in our breeding scheme.
# We also need to specify the mating matrix which has two rows and
# one column with integers 1 and 2 indicating a sample (founder)
# with the memberID 1 and a sample (founder) with the memberID 2
# were mated.
gds <- initScheme(gds, crosstype = "pair", mating = cbind(c(1:2)))

# Add information of the next cross conducted in our scheme.
# We chose 'crosstype = "selfing"', which do not require a
# mating matrix.
gds <- addScheme(gds, crosstype = "selfing")

# Execute error correction by estimating genotype and haplotype of
# founders and offspring.
gds <- estGeno(gds)

# Close the connection to the GDS file.
closeGDS(gds)

}
