% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/Methods-GbsrGenotypeData.R
\name{setRawGenotype}
\alias{setRawGenotype}
\alias{setRawGenotype,GbsrGenotypeData-method}
\title{Set the origina; data to be used in GBScleanR's functions}
\usage{
setRawGenotype(object, ...)

\S4method{setRawGenotype}{GbsrGenotypeData}(object)
}
\arguments{
\item{object}{A GbsrGenotypeData object.}

\item{...}{Unused.}
}
\value{
A GbsrGenotypeData object.
}
\description{
Set the "genotype" node and the "data" node
as primary nodes for genotype
data and read count data. The data stored
in the primary nodes are used in the
functions of GBScleanR.
}
\details{
A GbsrGenotypeData object storing information of
the primary node of genotype data and
read count data. All of the functions implemented
in \code{GBScleanR} check the primary nodes
and use data stored in those nodes.
\code{\link[=setCallFilter]{setCallFilter()}} create new nodes storing
filtered genotype calls and read counts in
a GDS file and change the primary nodes to
"filt.genotype" and "filt.data" for genotype and
read count data, respectively.
\code{\link[=setRawGenotype]{setRawGenotype()}} set back the nodes to
the original, those are "genotype" and "data" for
genotype and read count data, respectively.
You can set the filtered data again by \code{\link[=setFiltGenotype]{setFiltGenotype()}}.
}
\examples{
gds_fn <- system.file("extdata", "sample.gds", package = "GBScleanR")
gdata <- loadGDS(gds_fn)
gdata <- setCallFilter(gdata, dp_count = c(5, Inf))
# Now any functions of GBScleanR reference the genotype data
# stored in the "filt.genotype" node.

# If you need to set the "genotype" node, where store the raw genotype data
# as genotype to be referenced by the functions of GBScleanR,
# run the following.
gdata <- setRawGenotype(gdata)

closeGDS(gdata) # Close the connection to the GDS file
}
